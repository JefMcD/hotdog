"""
Django settings for hotdog_proj project.

Generated by 'django-admin startproject' using Django 4.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
from corsheaders.defaults import default_headers
from pathlib import Path
import os
from decouple import config

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# https://docs.djangoproject.com/en/1.11/ref/settings/#media-root
# Absolute filesystem path to the directory that will hold user-uploaded files.
# MEDIA_ROOT = os.path.join(BASE_DIR,'static/network/users')
MEDIA_ROOT =  os.path.join(BASE_DIR, 'hotdog_app_media')
MEDIA_URL = '/hotdog_app_media/'

ALLOWED_HOSTS = [
    'jeffers.pythonanywhere.com',
    'localhost:5173/',
    '127.0.0.1:5173',
    '127.0.0.1',
    'localhost',
    '127.0.0.1:8000',
    'localhost:8000',
    '127.0.0.1:8001',
    'localhost:8001'
]


# Application definition

INSTALLED_APPS = [
    'hotdog_app',
    'corsheaders',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'whitenoise.runserver_nostatic', # Whitenoise serves static in Dev and Prod
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', # Enable Whitenoise
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'hotdog_proj.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'hotdog_proj.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

'''
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql', 
        'NAME': config('MYSQL_hotdog_DB'),
        'USER': config('MYSQL_USERNAME'),
        'PASSWORD': config('MYSQL_PASSWORD'),
        'HOST': 'localhost',   # Or an IP Address that your DB is hosted on
        'PORT': '3306',
        'OPTIONS': {
            'read_default_file': '/etc/mysql/my.cnf',
        },
    }
}
'''

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Define Custom User Model
AUTH_USER_MODEL = "hotdog_app.User" # Abstract User model

# Default path when User tries to access site when not logged in
LOGIN_URL = '/login'
#AUTH_USER_MODEL = "hungry_hippo_app.User"

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators



# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True



# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIR = [
     os.path.join(BASE_DIR, 'hotdog_app/static/react_frontend'), 
] # Additional paths to be handled by static data

# must be called 'staticfiles' for whitenoise to work
STATIC_ROOT =  os.path.join(BASE_DIR, 'staticfiles') 
# WHITENOISE_ROOT = STATIC_ROOT
# (Django pre 4.2) File storage engine used by collectstatic. 
# Both of these work
STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage' # Standard Django

# Running collectstatic causes errors (Django 4.2.5)
# STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage" # Adds Compression & Caching
# STATICFILES_STORAGE = "whitenoise.storage.ManifestStaticFilesStorage" 
# STATICFILES_STORAGE = "whitenoise.storage.CompressedStaticFilesStorage"

# (Django 4.2+) File storage engine used by collectstatic. 
# WhiteNoise comes with a storage backend which compresses your files and hashes them to 
# unique names, so they can safely be cached forever. 
# To use it, set it as your staticfiles storage backend in your settings file.
# DOESNT WORK on Django 4.2.5
# STORAGES = {
#     # ...
#     "staticfiles": {
#         "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage", # Compression & Caching
#       # "BACKEND": "whitenoise.storage.ManifestStaticFilesStorage", # No Caching
#     },
# }



















# CORS https://www.stackhawk.com/blog/django-cors-guide/

# determines whether the server allows cookies in the cross-site HTTP requests
# Allow React frontend to make cross-origin requests
CORS_ALLOW_CREDENTIALS = True


CORS_ALLOW_HEADERS = list(default_headers) + [
    'X-CSRFToken',
]


CORS_ALLOWED_ORIGINS = [
    'http://localhost:5173',  # React Client Netlify/Vercel domain Note No trailing slash 'http://localhost:5173/'
    'http://127.0.0.1:5173',
    'http://jeffers.pythonanywhere.com', # Live Server
]

# Optionally, to allow all origins:
# The CORS_ALLOW_ALL_ORIGINS setting accepts only true or false. 
# If true, the server will accept all requests. 
# However, for security purposes, itâ€™s better to use one of the above settings to limit valid request sources
#
CORS_ALLOW_ALL_ORIGINS = True

# CORS_ALLOWED_ORIGIN_REGEXES are regular expressions that match domains that can make requests. 
# This setting is especially useful if you have many domains
# 
# CORS_ALLOWED_ORIGIN_REGEXES = [
# r"^https://\w+\.domain\.com$",
# ]













# CSRF_COOKIE_SECURE = False # Development
CSRF_COOKIE_SECURE = True  # Production

# Make sure Django allows the CSRF token to be sent via cookies. Needed for React Frontend
#CSRF_COOKIE_HTTPONLY = False

# This allows the cookie to be sent in cross-origin requests.
#CSRF_COOKIE_SAMESITE = 'None'

# Add the CSRF domains here
CSRF_TRUSTED_ORIGINS = [ 
    'http://jeffers.pythonanywhere.com',
    'http://localhost:5173', # seperate local server used for React Client eg Vercel/Netlify
    'http://127.0.0.1:5173',
    'http://127.0.0.1',
    'http://127.0.0.1:8000',
    'http://127.0.0.1:8001',
] 

FILE_UPLOAD_PERMISSIONS = 664
FILE_UPLOAD_DIRECTORY_PERMISSIONS = 775
SESSION_COOKIE_SECURE =True



# Email Sendmail config
EMAIL_BACKEND = config('EMAIL_BACKEND') 
EMAIL_USE_TLS = config('EMAIL_USE_TLS', cast=bool) 
EMAIL_HOST = config('EMAIL_HOST') 
EMAIL_PORT = config('EMAIL_PORT', cast=int) 
EMAIL_HOST_USER = config('EMAIL_HOST_USER') 
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD') 
DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL') 
